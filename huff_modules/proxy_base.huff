// stack: [ bottom top ]

// to be overriden by inheriting contract
#define macro TARGET = takes(0) returns(1) {}
#define macro CONSTRUCTOR_SHALLOW = takes(0) returns(0) {}

#define macro COPY_RETURNDATA = takes(2) returns(3) {
    // returndatacopy(dest_offset, offset, len)
    // returndatacopy(return_data_ptr, 0x00, returndatasize)

    // [ 0x00 success ]
    returndatasize          // [ 0x00 success returndatasize ]
    dup1                    // [ 0x00 success returndatasize returndatasize ]
    dup4                    // [ 0x00 success returndatasize returndatsize 0x00 ]
    // this takes advantage of return_data_ptr == 0x00
    dup5                    // [ 0x00 success returndatasize returndatsize 0x00 0x00 ]
    returndatacopy          // [ 0x00 success returndatasize ]
}


#define macro DO_DELEGATECALL = takes(2) returns(2) {
    // delegatecall(gas, addr, argsOffset, argsLength, retOffset, retLength)
    // delegatecall(gas, TARGET(), 0x00, calldatasize, 0x00, 0x00)

    // [ 0x00 calldatasize ]
    dup2                    // [ 0x00 calldatasize 0x00 ]
    dup3                    // [ 0x00 calldatasize 0x00 0x00 ]
    swap2                   // [ 0x00 0x00 0x00 calldatasize ]
    dup4                    // [ 0x00 0x00 0x00 calldatasize 0x00 ]
    TARGET()                // [ 0x00 0x00 0x00 calldatasize 0x00 TARGET() ]
    gas                     // [ 0x00 0x00 0x00 calldatasize 0x00 TARGET() gas ]
    delegatecall            // [ 0x00 success ]
}


#define macro COPY_CALLDATA = takes(1) returns(2) {
    // calldatacopy(destOffset, offset, length)
    // calldatacopy(0x00, 0x00, calldatasize)
    // writes calldata to memory from 0x00 to (0x00 + calldatasize).
    // takes advantage of the fact that the free_mem_ptr is at 0x00

    // [ 0x00 ]
    calldatasize            // [ 0x00 calldatasize ]
    dup1                    // [ 0x00 calldatasize calldatasize ]
    dup3                    // [ 0x00 calldatasize calldatasize 0x00 ]
    dup4                    // [ 0x00 calldatasize calldatasize 0x00 0x00 ]
    calldatacopy            // [ 0x00 calldatasize ]
}


template <throw_label>
#define macro CHECK_RETURN = takes(3) returns(2) {
    // switch success
    // case 0 { revert(return_data_ptr, return_data_len) }
    // case 1 { return(return_data_ptr, return_data_len) }

    // [ 0x00 success returndatasize ]
    swap2                   // [ returndatasize success 0x00 ]
    swap1                   // [ returndatasize 0x00 success ]
    iszero                  // [ returndatasize 0x00 (success==0) ]
    <throw_label>           // [ returndatasize 0x00 (success==0) <throw_label> ]
    jumpi                   // [ returndatasize 0x00 ]
}


#define macro RUNTIME = takes(0) returns(0) {
    // [ ]
    0x00                    // [ 0x00 ]
    COPY_CALLDATA()         // [ 0x00 calldatasize ]
    DO_DELEGATECALL()       // [ 0x00 success ]
    COPY_RETURNDATA()       // [ 0x00 success returndatasize ]
    CHECK_RETURN<throw>()   // [ returndatasize 0x00 ]
    return                  // [ ]

    // [ returndatasize 0x00 ]
    throw:
        revert
}


#define macro COPY_RUNTIME = takes(0) returns(2) {
    // codecopy(destOffset, offset, len)
    // codecopy(0x00, runtime_offset, runtime_size)

    // [ ]
    __codesize(RUNTIME)             // [ rt_size ]
    0x00                            // [ rt_size 0x00 ]
    dup2                            // [ rt_size 0x00 rt_size ]
    __codesize(CONSTRUCTOR_SHALLOW) // [ rt_size 0x00 rt_size rt_offset ]
    dup3                            // [ rt_size 0x00 rt_size rt_offset 0x00 ]
    codecopy                        // [ rt_size 0x00 ]
}


// COPY_RUNTIME w/ placeholder instead of __codesize(CONSTRUCTOR_SHALLOW)
#define macro COPY_RUNTIME_SHALLOW = takes(0) returns(0) {
    __codesize(RUNTIME)
    0x00
    dup2
    0x01            // placeholder for __codesize(MAIN__CONSTRUCTOR_SHALLOW)
    dup3
    codecopy
}
