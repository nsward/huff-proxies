// stack: [ bottom top ]

// to be overriden by inheriting contract
#define macro TARGET = takes(0) returns(1) {}
#define macro TARGET_SLOT = takes(0) returns(1) {}
#define macro CONSTRUCTOR_SHALLOW = takes(0) returns(0) {}

// stores a word in the storage slot for the deelgatecall target
#define macro STORE_TARGET = takes(1) returns(0) {
    // sstore(key, value)

    // [ target ]
    TARGET_SLOT()                   // [ target TARGET_SLOT() ]
    sstore                          // [ ]
}

// copy all constructor args into memory, leaves ptr and length on stack
template <constructor_args_offset>
#define macro COPY_CONSTRUCTOR_ARGS = takes(1) returns(2) {
    // codecopy(destOffset, offset, length)

    // [ dest_offset ]
    <constructor_args_offset>       // [ dest_off c_args_off ]
    dup1                            // [ dest_off c_args_off c_args_off ]
    codesize                        // [ dest_off c_args_off c_args_off codesize ]
    sub                             // [ dest_off c_args_off c_args_len ]
    dup1                            // [ dest_off c_args_off c_args_len c_args_len ]
    swap2                           // [ dest_off c_args_len c_args_len c_args_off ]
    dup4                            // [ dest_off c_args_len c_args_len c_args_off dest_off ]
    codecopy                        // [ c_args_ptr c_args_len]
}

// copy arbitrary length returndata into memory.
// assumes returndata ptr == 0x00
#define macro COPY_RETURNDATA = takes(2) returns(3) {
    // returndatacopy(dest_offset, offset, len)
    // returndatacopy(return_data_ptr, 0x00, returndatasize)

    // [ 0x00 success ]
    returndatasize          // [ 0x00 success returndatasize ]
    dup1                    // [ 0x00 success returndatasize returndatasize ]
    dup4                    // [ 0x00 success returndatasize returndatsize 0x00 ]
    // this takes advantage of return_data_ptr == 0x00
    dup5                    // [ 0x00 success returndatasize returndatsize 0x00 0x00 ]
    returndatacopy          // [ 0x00 success returndatasize ]
}

// perform a delegatecall
#define macro DO_DELEGATECALL = takes(2) returns(2) {
    // delegatecall(gas, addr, argsOffset, argsLength, retOffset, retLength)
    // delegatecall(gas, TARGET(), 0x00, calldatasize, 0x00, 0x00)

    // [ 0x00 calldatasize ]
    dup2                    // [ 0x00 calldatasize 0x00 ]
    dup3                    // [ 0x00 calldatasize 0x00 0x00 ]
    swap2                   // [ 0x00 0x00 0x00 calldatasize ]
    dup4                    // [ 0x00 0x00 0x00 calldatasize 0x00 ]
    TARGET()                // [ 0x00 0x00 0x00 calldatasize 0x00 TARGET() ]
    gas                     // [ 0x00 0x00 0x00 calldatasize 0x00 TARGET() gas ]
    delegatecall            // [ 0x00 success ]
}

// bitmask an address
#define macro MASK_ADDRESS = takes(1) returns(1) {
    // [ addr ]
    0x01                            // [ addr 0x01 ]
    dup1                            // [ addr 0x01 0x01 ]
    0xa0                            // [ addr 0x01 0x01 0xa0 ]
    shl
    sub
    and                             // [ address(addr) ]
}

// throw if value on top of stack < 32
template <throw_label>
#define macro ASSERT_GTE_32 = takes(1) returns(0) {
    // [ value ]
    0x20                            // [ value 0x20 ]
    swap1                           // [ 0x20 value ]
    lt                              // [ (value < 0x20) ]
    <throw_label>                   // [ (value < 0x20) throw_label ]
    jumpi                           // [ ]
}

// note that this takes args in reverse of intuitive order
template <throw_label>
#define macro ASSERT_GTE = takes(2) returns(0) {
    // [ val min_val  ]
    swap1                   // [ min_val val ]
    lt                      // [ (val < min_val) ]
    <throw_label>           // [ (val < min_val) throw_label ]
    jumpi                   // [ ]
}

#define macro COPY_CALLDATA = takes(1) returns(2) {
    // calldatacopy(destOffset, offset, length)
    // calldatacopy(0x00, 0x00, calldatasize)
    // writes calldata to memory from 0x00 to (0x00 + calldatasize).
    // takes advantage of the fact that the free_mem_ptr is at 0x00

    // [ 0x00 ]
    calldatasize            // [ 0x00 calldatasize ]
    dup1                    // [ 0x00 calldatasize calldatasize ]
    dup3                    // [ 0x00 calldatasize calldatasize 0x00 ]
    dup4                    // [ 0x00 calldatasize calldatasize 0x00 0x00 ]
    calldatacopy            // [ 0x00 calldatasize ]
}


template <throw_label>
#define macro CHECK_RETURN = takes(3) returns(2) {
    // switch success
    // case 0 { revert(return_data_ptr, return_data_len) }
    // case 1 { return(return_data_ptr, return_data_len) }

    // [ 0x00 success returndatasize ]
    swap2                   // [ returndatasize success 0x00 ]
    swap1                   // [ returndatasize 0x00 success ]
    iszero                  // [ returndatasize 0x00 (success==0) ]
    <throw_label>           // [ returndatasize 0x00 (success==0) <throw_label> ]
    jumpi                   // [ returndatasize 0x00 ]
}

#define macro THROW = takes(0) returns(0) {
    // [ ]
    0x00
    0x00
    revert
}

template <dest>
#define macro JUMPI = takes(1) returns(0) {
    // [ condition ]
    <dest>  // [ condition <dest> ]
    jumpi   // [ ]
}

#define macro RUNTIME = takes(0) returns(0) {
    // [ ]
    0x00                        // [ 0x00 ]
    COPY_CALLDATA()             // [ 0x00 calldatasize ]
    DO_DELEGATECALL()           // [ 0x00 success ]
    COPY_RETURNDATA()           // [ 0x00 success returndatasize ]
    CHECK_RETURN<throw_label>() // [ returndatasize 0x00 ]
    return                      // [ ]

    // [ returndatasize 0x00 ]
    throw_label:
        revert
}

#define macro RUNTIME_SIZE = takes(0) returns(1) {
    __codesize(RUNTIME)
}

#define macro CONSTRUCTOR_SHALLOW_SIZE = takes(0) returns(1) {
    __codesize(CONSTRUCTOR_SHALLOW)
}

#define macro COPY_RUNTIME = takes(0) returns(2) {
    // codecopy(destOffset, offset, len)
    // codecopy(0x00, runtime_offset, runtime_size)

    // [ ]
    RUNTIME_SIZE()                  // [ rt_size ]
    0x00                            // [ rt_size 0x00 ]
    dup2                            // [ rt_size 0x00 rt_size ]
    CONSTRUCTOR_SHALLOW_SIZE()      // [ rt_size 0x00 rt_size rt_offset ]
    dup3                            // [ rt_size 0x00 rt_size rt_offset 0x00 ]
    codecopy                        // [ rt_size 0x00 ]
}


// COPY_RUNTIME w/ placeholder instead of __codesize(CONSTRUCTOR_SHALLOW)
#define macro COPY_RUNTIME_SHALLOW = takes(0) returns(0) {
    __codesize(RUNTIME)
    0x00
    dup2
    0x01            // placeholder for __codesize(CONSTRUCTOR_SHALLOW)
    dup3
    codecopy
}
