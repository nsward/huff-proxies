#include "./proxy_base.huff"

// stack: [ bottom top ]

// TODO: Add an OWNER_SLOT and store the deployer address?
// Take a second contructor arg, or set it to caller?

// put the storage slot for the delegatecall target on top of stack
#define macro TARGET_SLOT = takes(0) returns(1) { 0x00 }

// sload the delegatecall target and leaves it on top of the stack
#define macro TARGET = takes(0) returns(1) {
    // sload(TARGET_SLOT)

    // []
    TARGET_SLOT()                   // [ TARGET_SLOT() ]
    sload                           // [ ]
}

// matches size of COPY_RUNTIME macro
#define macro COPY_RUNTIME_SHALLOW = takes(0) returns(0) {
    0x00
    0x00
    dup2
    0x00
    dup3
    codecopy
}

// matches size of CONSTRUCTOR macro
#define macro CONSTRUCTOR_SHALLOW = takes(0) returns(0) {
    0x00
    COPY_CONSTRUCTOR_ARGS<0x00>()
    ASSERT_GTE_32<throw_label>()  // [ c_args_ptr ]
    mload                               // [ target ]
    MASK_ADDRESS()                      // address(target) ]
    STORE_TARGET()                      // [ ]
    COPY_RUNTIME_SHALLOW()              // [ runtime_size 0x00 ]
    return                              // [ ]

    throw_label:
        THROW()
}

#define macro CONSTRUCTOR = takes(0) returns(0) {
    // [ ]
    0x00                                // [ c_args_ptr ]
    COPY_CONSTRUCTOR_ARGS<CONSTRUCTOR_SHALLOW_SIZE+RUNTIME_SIZE>()
    // [ c_args_ptr c_args_len ]

    // check that constructor args were at least 32 bytes
    ASSERT_GTE_32<throw_label>()  // [ c_args_ptr ]
    mload                               // [ target ]
    MASK_ADDRESS()                      // address(target) ]
    STORE_TARGET()                      // [ ]
    COPY_RUNTIME()                      // [ runtime_size 0x00 ]
    return                              // [ ]

    throw_label:
        THROW()
}
